// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System;
using C2TPro;

public static partial class CardTable
{
	public class Row
	{
		public int Index;
		public string Name;
		public string Sprite;
		public string Explaine;

	}

	static List<Row> rowList = new List<Row>();
	static bool isLoaded = false;

	public static bool IsLoaded()
	{
		return isLoaded;
	}

	public static List<Row> GetRowList()
	{
        StaticLoad();
		return rowList;
	}

	public static void Load(string csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser.Parse(csv);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.Index = string.IsNullOrEmpty(grid[i][0]) ? 0 : Convert.ToInt32(grid[i][0]);
			row.Name = grid[i][1];
			row.Sprite = grid[i][2];
			row.Explaine = grid[i][3];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public static void StaticLoad()
	{
		if(!isLoaded) 
            Load(Resources.Load<TextAsset>("Table/Card").text);
	}


	public static int NumRows()
	{
        StaticLoad();
		return rowList.Count;
	}

	public static Row GetAt(int i)
	{
        StaticLoad();
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public static Row Find_Index(int find)
	{
        StaticLoad();
		return rowList.Find(x => x.Index == find);
	}
	public static List<Row> FindAll_Index(int find)
	{
        StaticLoad();
		return rowList.FindAll(x => x.Index == find);
	}
	public static Row Find_Name(string find)
	{
        StaticLoad();
		return rowList.Find(x => x.Name == find);
	}
	public static List<Row> FindAll_Name(string find)
	{
        StaticLoad();
		return rowList.FindAll(x => x.Name == find);
	}
	public static Row Find_Sprite(string find)
	{
        StaticLoad();
		return rowList.Find(x => x.Sprite == find);
	}
	public static List<Row> FindAll_Sprite(string find)
	{
        StaticLoad();
		return rowList.FindAll(x => x.Sprite == find);
	}
	public static Row Find_Explaine(string find)
	{
        StaticLoad();
		return rowList.Find(x => x.Explaine == find);
	}
	public static List<Row> FindAll_Explaine(string find)
	{
        StaticLoad();
		return rowList.FindAll(x => x.Explaine == find);
	}

}